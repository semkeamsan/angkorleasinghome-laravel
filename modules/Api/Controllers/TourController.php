<?php

namespace Modules\Api\Controllers;

use App\Http\Controllers\Controller;
use Modules\Tour\Models\Tour;
use Illuminate\Http\Request;
use Modules\Tour\Models\TourCategory;
use Modules\Location\Models\Location;
use Modules\Core\Models\Attributes;

class TourController extends Controller
{
    protected $tourClass;
    protected $locationClass;
    protected $tourCategoryClass;
    protected $attributesClass;

    public function __construct()
    {
        $this->tourClass = Tour::class;
        $this->locationClass = Location::class;
        $this->tourCategoryClass = TourCategory::class;
        $this->attributesClass = Attributes::class;
    }

    public function callAction($method, $parameters)
    {
        if (setting_item('tour_disable')) {
            return $this->sendError(__("Tour not found"));
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request)
    {
        $list = call_user_func([$this->tourClass, 'search'], $request);
        $limit_location = 15;
        if (empty(setting_item("space_location_search_style")) or setting_item("space_location_search_style") == "normal") {
            $limit_location = 1000;
        }
        $data = [
            'data' => $list->map(function ($row){
                return $row->dataForApi();
            }),
            'tour_category' => $this->tourCategoryClass::where('status', 'publish')->with(['translations'])->get()->toTree(),
            'tour_location' => $this->locationClass::where('status', 'publish')->with(['translations'])->limit($limit_location)->get()->toTree(),
            'tour_min_max_price' => $this->tourClass::getMinMaxPrice(),
            "blank" => 1,
        ];
        $layout = setting_item("tour_layout_search", 'normal');
        if ($request->query('_layout')) {
            $layout = $request->query('_layout');
        }

        $data['attributes'] = $this->attributesClass::where('service', 'tour')->orderBy("position", "desc")->with(['terms' => function ($query) {
            $query->withCount('tour');
        }, 'translations'])->get();
        return $this->sendSuccess($data);
    }

    public function detail($id)
    {
        $row = $this->tourClass::where('slug', $id)->orWhere('id',$id)->with(['location', 'translations', 'hasWishList'])->first();
        if (empty($row) or !$row->hasPermissionDetailView()) {
            return $this->sendError(__("Tour not found"));
        }
        $tour_related = [];
        $location_id = $row->location_id;
        if (!empty($location_id)) {
            $tour_related = $this->tourClass::where('location_id', $location_id)->where("status", "publish")->take(4)->whereNotIn('id', [$row->id])->with(['location', 'translations', 'hasWishList'])->get();
        }
        $review_list = $row->getReviewList();
        $data = [
            'data' => $row->dataForApi(true),
            'tour_related' => $tour_related,
            'booking_data' => $row->getBookingData(),
            'review_list' => $review_list,
            'body_class' => 'is_single',
        ];
        return $this->sendSuccess($data);
    }

    public function checkAvailability(Request $request)
    {
        $location_id = \request('location_id');
        $rules = [
            'location_id' => 'required',
            'date' => 'required'
        ];
        $validator = \Validator::make(request()->all(), $rules);
        if ($validator->fails()) {
            return $this->sendError($validator->errors()->all());
        }

        $location = $this->locationClass::find($location_id);
        if (empty($location_id) or empty($location)) {
            return $this->sendError(__("Location not found"));
        }

        $tours = call_user_func([$this->tourClass, 'search'], $request);
        return $this->sendSuccess($tours);
    }
}
